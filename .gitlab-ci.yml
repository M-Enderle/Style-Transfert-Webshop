stages:
  - build
  - test
  - lint
  - deploy

webserver-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/webserver/Dockerfile -t webserver .

database-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/database/Dockerfile -t database .

ai-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/ai/Dockerfile -t ai .

test-job:
  stage: test
  image: python:3.10
  script:
    - pip install poetry
    - poetry install && poetry add pytest
    - poetry run pytest tests/*/*.py

black:
  stage: lint
  image: python:3.10
  script:
    - pip install black
    - black --check src

mypy:
  stage: lint
  image: python:3.10
  script:
    - pip install mypy types-toml types-Flask
    - pip install torch==1.13.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
    - mypy src

pylint:
  stage: lint
  image: python:3.10
  script:
    - pip install pylint
    - pylint src
  allow_failure: true

jinjaninja:
  stage: lint
  image: python:3.10
  script:
    - pip install jinjaninja
    - jinja-ninja src/sts/app/templates/*.html 
  
deploy-job:
  stage: deploy
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
