stages:
  - docker-build
  - test
  - lint
  - build
  - deploy

webserver-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/webserver/Dockerfile -t webserver .

database-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/database/Dockerfile -t database .

ai-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/ai/Dockerfile -t ai .

test-job:
  stage: test
  image: python:3.10
  script:
    - pip install poetry
    - poetry install && poetry add pytest
    - poetry run pytest tests/*/*.py

black:
  stage: lint
  image: python:3.10
  script:
    - pip install black
    - black --check src

mypy:
  stage: lint
  image: python:3.10
  script:
    - pip install mypy types-toml types-Flask
    - pip install torch==1.13.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
    - mypy src
  allow_failure: true

pylint:
  stage: lint
  image: python:3.10
  script:
    - pip install pylint
    - pylint src
  allow_failure: true

build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG -t $IMAGE_TAG_LATEST -f docker/webserver/Dockerfile .
    - docker push $IMAGE_TAG

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f sts-website || true"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 5000:8501 --name sts-website --restart unless-stopped $IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker cp /media/user.toml sts-website:/style-transfer-webshop/user.toml"
  environment:
    name: production
    url: http://45.145.224.7
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
